%% Deep Space Maneuver Table Script
%  C: 11JUL20

clear; clc; close; format long g; firstPC = 0; PC = 0; firstMac = 1; Mac = 1; 


%% Initialize Local Orbital Mechanics Source Files
if firstPC == 1
    cd2 = 'C:\Users\Aurora\dev\dev_orbitalmechanics\orbitalmechanics_rp';
    addpath(genpath(cd2))
    cd3 = 'C:\Users\Aurora\dev\dev_orbitalmechanics\research';
    addpath(genpath(cd3))   
end
if firstMac == 1
    cd2 = '/Users/rohanpatel/dev/dev_orbitalmechanics/orbitalmechanics_rp';
    addpath(genpath(cd2))
    cd3 = '/Users/rohanpatel/dev/dev_orbitalmechanics/research';
    addpath(genpath(cd3))
end
if PC == 1
    cspice_kclear;
    nf009 = 'C:\Users\Aurora\dev\dev_orbitalmechanics\orbitalmechanics_rp\src\SPKs\naif0009.tls';
    de438 = 'C:\Users\Aurora\dev\dev_orbitalmechanics\orbitalmechanics_rp\src\SPKs\de438.bsp';
    pck = 'C:\Users\Aurora\dev\dev_orbitalmechanics\orbitalmechanics_rp\src\SPKs\pck00010.tpc';
    cspice_furnsh({de438,nf009,pck})
end
if Mac == 1
    cspice_kclear;
    nf009 = '/Users/rohanpatel/dev/dev_orbitalmechanics/orbitalmechanics_rp/src/SPKs/naif0009.tls';
    de438 = '/Users/rohanpatel/dev/dev_orbitalmechanics/orbitalmechanics_rp/src/SPKs/de438.bsp';
    pck = '/Users/rohanpatel/dev/dev_orbitalmechanics/orbitalmechanics_rp/src/SPKs/pck00010.tpc';
    cspice_furnsh({de438,nf009,pck})   
end

clear firstPC firstMac PC Mac

%% DSM Inputs
Klist = [-2 2];          % Leveraging Maneuver Type (K:1 w/ Earth, pos or neg.) 
thetaList = [10:1:15];      % List of intercept thetas
pltFBvecs = false;        % Debug Flyby Velocity Vectors
pltLevOrb = false;        % Debug Trajectory Visual

%% DSM Calculation
allDsm = struct;
for i=1:length(Klist)
    for j=1:length(thetaList)
        K = Klist(i);
        theta = thetaList(j);
        
        % Save Variable Name
        if K < 0
            strucName = ['k',num2str(abs(K)),'m'];
            
        else
            strucName = ['k',num2str(abs(K)),'p'];
        end
        thetaName = matlab.lang.makeValidName(num2str(theta)); thetaName = thetaName(2:end);
        
               
        % Calculate DSM and Leveraging Orbit Properties
        out = calcDsm(K,theta,pltFBvecs,pltLevOrb);
        
        if out.solfound
            allDsm.(strucName).(['t',thetaName]) = out;
        else
            disp('Solution did not compute')
            %allDsm.(strucName).(['t',num2str(theta)]) = NaN;
        end
        
    end
end

%% Processing Results
%writetable(struct2table(allTrajTex.jupTraj),'jupTraj_tex.csv')

allDsmfld = fieldnames(allDsm);

u=0;
for i=1:length(allDsmfld)
    
    outK = allDsm.(allDsmfld{i});
    fld = fieldnames(outK);

    
    for j=1:length(fld)
        %sfld = fieldnames(outK.(fld{j}));
        o = outK.(fld{j});
        
        csvTable(u+j,1) = o.K;
        csvTable(u+j,2) = o.thetaInt;
        csvTable(u,3) = o.dsmDV;
        csvTable(u,4) = o.levOrbitTime;
        csvTable(u,5) = o.vinflaunch;
        csvTable(u,6) = o.vinf1(1);
        csvTable(u,7) = o.vinf1(2);
        csvTable(u,8) = o.vinf2(1);
        csvTable(u,9) = o.vinf2(2);
        csvTable(u,10) = o.bendingdeg;
        csvTable(u,11) = o.r_car;
        csvTable(u,12) = o.dvegaRA;

        u = u+j
    end
end   
    
    
    
    
    
    
    
    
    
    
    
    